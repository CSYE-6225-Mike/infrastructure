AWSTemplateFormatVersion: 2010-09-09

Description: This template creates the VPC, Security groups, RDS and EC2 instance.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VpcCIDR
      - 
        Label:
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
      - 
        Label:  
          default: "EC2 Parameters"
        Parameters:
          - InstanceType
          - EC2InstanceSecurityGroupName
          - KeyName
          - AmazonImageID

      - Label:
          default: "DB and S3 and RDS"
        Parameters:
          - DBSecurityGroupName
          - EnvironmentName
          - RDSUsername
          - RDSUserPassword

      - Label:
          Default: "Route 53 DNS Record"
        Parameters:
          - HostedZoneName
      - 
        Label:  
          default: "SSH CIDR"
        Parameters:
          - SSHLocation



Parameters:
  VpcCIDR:  
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for public subset 1
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for public subset 2
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for public subset 3
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for private subset 1
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for private subset 2
    Type: String 
    Default: 10.0.4.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for private subset 3
    Type: String
    Default: 10.0.5.0/24

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

  InstanceType:
    Description: WebApp EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]

  EC2InstanceSecurityGroupName:
    Description: Security Group Name of Application
    Type: String
    Default: application

  KeyName:
    Description: Name of a EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws-01
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  AmazonImageID:
    Description: The ID of Amazon Machine Image(AMI)
    Type: String
    Default: "ami-033da3e4b4635798f"

  DBSecurityGroupName:
    Description: Security Group Name of the DB
    Type: String
    Default: "database"

  ##S3 bucket environment name
  EnvironmentName:
    Description: Environment name for S3 bucket
    Type: String
    Default: "csye6225"

  RDSUsername:
    Description: RDS Master Username
    Type: String
    Default: "csye6225"
  
  RDSUserPassword:
    Description: RDS Master Password
    Type: String
    Default: "clB4o0gXZ[*yU.ERVh-b"

  RDSDBName:
    Description: RDS DB Name
    Type: String 
    Default: "csye6225"
  
  RDSPort:
    Description: RDS Port
    Type: Number
    Default: 3306
  
  HostedZoneResourceName:
    Description: Hosted Zone ID for demo account
    Type: String
    Default: "Z07305123NGHHATDW7KUX"

  
Resources:
  ## Create the VPC
  VPC: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Test VPC

  ## Create the Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: Test InternetGateway

  ## Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ## Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      

  ## Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 2


  ## Create Public Subnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 3

  ## Create PrivateSubnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 1
  
  ## Create PrivateSubnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 2 

  ## Create PrivateSubnet3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 3

  ## Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Public Route Table

  ## Create PublicRoute
  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  ## Create Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Private Route Table
  
  ## Create Private Route
  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 10.0.0.0/16

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3 

  ## Create AWS::EC2::SecurityGroup
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Webapp application
      GroupName: !Ref EC2InstanceSecurityGroupName
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: EC2 Security Group

  ## Create the DB Security Group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB security group for webapp"
      GroupName: !Ref DBSecurityGroupName
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2InstanceSecurityGroup
      Tags: 
        - Key: Name
          Value: DB Security Group

  ## Create S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
      BucketName: !Join
        - "-"
        - - "csye6225-fall"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - !Ref EnvironmentName
          - "michael"
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration: 
        Rules:
          - Id: MoveFromStandardToStandard_IA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      Tags: 
        - Key: Name
          Value: S3 Bucket

  ## Create RDS Parameter Group
  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: Using MySQL 8.0 same with local version
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: RDS Parameter Group

  ## Create RDS Subnet Group
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private Subnet Group for MySQL
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
        - Key: Name
          Value: RDS Subnet Group

  ## Create RDS Instance 
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSParameterGroup
      - RDSSubnetGroup
      - DBSecurityGroup
    Properties: 
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: csye6225
      DBName: !Ref RDSDBName
      DBParameterGroupName: !Ref RDSParameterGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: MySQL
      EngineVersion: 8.0.30
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSUserPassword
      MultiAZ: false
      Port: !Ref RDSPort
      PubliclyAccessible: false
      StorageEncrypted: true
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      Tags: 
        - Key: Name
          Value: RDS Instance

  ## Create IAM Role EC2-CSYE6225 with WebAppS3 policy
  EC2InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      # RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies: 
        - PolicyName: WebAppS3
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  ## Create the IAM Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
       - !Ref EC2InstanceIAMRole

  ## Create the DNS & EC2 Instance A Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties: 
      HostedZoneId: !Ref HostedZoneResourceName
      Name: prod.mikea1.me
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  ## Create the EC2 instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !GetAtt EC2InstanceSecurityGroup.GroupId
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageID
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            VolumeSize: "50"
            DeleteOnTermination: "true"
      Tags:
        - Key: Name
          Value: Mike
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash
          RDS_DB_NAME=${RDSDBName}
          RDS_PORT=${RDSPort}
          RDS_USERNAME=${RDSUsername}
          RDS_PASSWORD=${RDSUserPassword}
          RDS_HOST=${RDSInstance.Endpoint.Address}
          BUCKET_NAME=${S3Bucket}
          AWS_REGION=${AWS::Region}
          SNS_TOPIC=${SNSTopic}
          DynamoDB_NAME=${DynamoDB}
          {
            echo "RDS_DB_NAME=$RDS_DB_NAME"
            echo "RDS_PORT=$RDS_PORT"
            echo "RDS_USERNAME=$RDS_USERNAME"
            echo "RDS_PASSWORD=$RDS_PASSWORD"
            echo "RDS_HOST=$RDS_HOST"
            echo "BUCKET_NAME=$BUCKET_NAME"
            echo "AWS_REGION=$AWS_REGION"
            echo "SNS_TOPIC=$SNSTopic"
            echo "DynamoDB_NAME=${DynamoDB}"
          } >>/home/ubuntu/.env
          mysql -u $RDS_USERNAME -p$RDS_PASSWORD -h $RDS_HOST -e "ALTER USER '$RDS_USERNAME'@'%' REQUIRE SSL;"
          sudo cp /home/ubuntu/.env /home/ubuntu/webapp/.env
          cd /home/ubuntu/webapp
          npm start

  ## Create the SNS topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !GetAtt LambdaFunction.arn
          Protocol: lambda
      Tags: 
        - Key: name
          Value: SNS Topic
      TopicName: !Sub ${AWS::StackName}-SNSTopic

  ## Create the SNS Topic Policy
  SNSTopicPolicy: 
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument: 
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:RemovePermission
              - SNS:SetTopicAttributes
              - SNS:DeleteTopic
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:AddPermission
              - SNS:Subscribe
            Resource: !Ref SNSTopic
            Condition: 
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
      Topics: 
        - !Ref SNSTopic

  ## Create the DynamoDB 
  DynamoDBTrackUserToken:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: username
          AttributeType: S
      BillingMode: PROVISIONED
      KeySchema: 
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref ${AWS::StackName}-DynamoDBTrackUserToken
      Tags: 
        - Key: name
          Value: DynamoDB Track User Token Table
      TimeToLiveSpecification: 
        AttributeName: TTL
        Enabled: Yes

  ## Create the DynamoDB 
  DynamoDBTrackUserEmail:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: email
          AttributeType: S
      BillingMode: PROVISIONED
      KeySchema: 
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Ref ${AWS::StackName}-DynamoDBTrackUserEmailTable
      Tags: 
        - Key: name
          Value: DynamoDB Track User Email Table 


  ## Create Lambda Permission
  SNSPermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt function.Arn
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt SNSTopic.Arn


  ## Create the IAM role for Lambda function
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Tags: 
        - Key: Name
          Value: Lambda Function Role

   
  ## Create AWS lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: DynamoDBTrackUserEmail
    Properties: 
      Architectures: 
        - x86_64
      Description: This is a lambda function invoked by SNS message and send a email to verify user. 
      Environment: 
          EmailTrackingDynamoDBTable: !Ref DynamoDBTrackUserEmail
          EmailTrackingDynamoDBRegion: !Ref AWS::Region
          DomainEnvironment: !Ref EnvironmentName
      FunctionName: "CSYE6225-Fall-Lambda-Function"
      Handler: index.handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: nodejs16.x
      Tags: 
        - Key: name
          Value: Lambda Function
      Timeout: 100
      Code: 
        ZipFile: |
          const AWS = require("aws-sdk");
          const checkIfEmailSentAlready = async (
            dynamoDbClient,
            emailTrackingDynamoDBTable,
            userEmail
          ) => {
            const params = {
              TableName: emailTrackingDynamoDBTable,
              Key: {
                email: userEmail,
              },
            };
            const data = await dynamoDbClient.get(params).promise();
            console.log("Data:", data);
            if (data.Item) {
              return true;
            } else {
              return false;
            }
          };
          const logEmailSentToDynamoDB = async (
            dynamoDbClient,
            emailTrackingDynamoDBTable,
            userEmail
          ) => {
            const params = {
              TableName: emailTrackingDynamoDBTable,
              Item: {
                email: userEmail,
              },
            };
            const data = await dynamoDbClient.put(params).promise();
            console.log("Data:", data);
          };
          exports.handler = async (event, context, callback) => {
            console.log("Received event:", JSON.stringify(event, null, 4));
            const emailTrackingDynamoDBTable = process.env.EmailTrackingDynamoDBTable;
            const emailTrackingDynamoDBRegion = process.env.EmailTrackingDynamoDBRegion;
            const domainEnvironment = process.env.DomainEnvironment;
            // Set the region
            AWS.config.update({ region: emailTrackingDynamoDBRegion });
            const dynamoDbClient = new AWS.DynamoDB.DocumentClient({
              region: emailTrackingDynamoDBRegion,
            });
            const message = event.Records[0].Sns.Message;
            const parsedMessage = JSON.parse(message);
            const messageType = parsedMessage.message_type;
            const userToken = parsedMessage.userToken;
            const userEmail = parsedMessage.username;
            const first_name = parsedMessage.first_name;
            const last_name = parsedMessage.last_name;
            const emailAlreadySent = await checkIfEmailSentAlready(
              dynamoDbClient,
              emailTrackingDynamoDBTable,
              userEmail
            );
            if (!emailAlreadySent) {
              // Send email using AWS SES
              console.log("Email is not already sent to the user: " + userEmail + ". Trying to send");
              const ses = new AWS.SES();
              const params = {
                Destination: {
                  ToAddresses: [userEmail],
                },
                Message: {
                  Body: {
                    Html: {
                      Charset: "UTF-8",
                      Data: `<p>Hello ${first_name} ${last_name},</p>
                      <p>To verify your email address with prod.mikea1.me, Please click the following link: <a href="https://prod.mikea1.me/v1/verifyUserEmail?email=${userEmail}&token=${userToken}">Verify Email</a> or paste the following link in the browser: https://prod.mikea1.me/v1/verifyUserEmail?email=${userEmail}&token=${userToken}</p>`,
                    },
                  },
                  Subject: {
                    Charset: "UTF-8",
                    Data: `Verify you user account for $prod.mikea1.me`,
                  },
                },
                Source: `userverification@$prod.mikea1.me`,
              };
              const data = await ses.sendEmail(params).promise();
              console.log(data);
              console.log("Email sent successfully");
              await logEmailSentToDynamoDB(
                dynamoDbClient,
                emailTrackingDynamoDBTable,
                userEmail
              );
              console.log("Email logged to DynamoDB");
            } else {
              console.log(
                "Email already sent to user: " + userEmail + " No need to send again"
              );
            }
            callback(null, "success");
          };


Outputs:
  ## Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

  ## Export Public Subnet 1 
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

  ## Export Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

  ## Export Public Subnet 3
  PublicSubnet3:
    Description: Public Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3

  ## Export Private Subnet 1
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1

  ## Export Private Subnet 2
  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2

  ## Export Private Subnet 3
  PrivateSubnet3:
    Description: Private Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
    Value: !Ref PrivateSubnet3
  
  EC2InstanceSecurityGroup:
    Description: EC2 Instance Security Group of the newly created EC2 instance
    Export:
      Name: !Sub ${AWS::StackName}-EC2InstanceSecurityGroup
    Value: !Ref EC2InstanceSecurityGroup
  
  DBSecurityGroup:
    Description: DB Security Group
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup
    Value: !Ref DBSecurityGroup

  S3Bucket:
    Description: S3 Bucket
    Export:
      Name: !Sub ${AWS::StackName}-S3Bucket
    Value: !Ref S3Bucket

  RDSParameterGroup:
    Description: RDS Parameter Group
    Export:
      Name: !Sub ${AWS::StackName}-RDSParameterGroup
    Value: !Ref RDSParameterGroup
  
  RDSSubnetGroup:
    Description: RDS Subnet Group
    Export:
      Name: !Sub ${AWS::StackName}-RDSSubnetGroup
    Value: !Ref RDSSubnetGroup

  RDSInstance:
    Description: RDS Instance
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstance
    Value: !Ref RDSInstance

  EC2InstanceIAMRole:
    Description: EC2 Instance IAM Role
    Export:
      Name: !Sub ${AWS::StackName}-EC2InstanceIAMRole
    Value: !Ref EC2InstanceIAMRole
  
  EC2InstanceProfile:
    Description: EC2 Instance Profile
    Export:
      Name: !Sub ${AWS::StackName}-EC2InstanceProfile
    Value: !Ref EC2InstanceProfile

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Export:
      Name: !Sub ${AWS::StackName}-EC2Instance
    Value: !Ref EC2Instance


  

  
